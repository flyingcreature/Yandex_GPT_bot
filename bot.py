import logging

import telebot
from telebot.types import Message

import db
from config import ADMINS, BOT_TOKEN, COUNT_LAST_MSG, LOGS_PATH, MAX_USERS
from speechkit import speech_to_text, text_to_speech
from utils import (
    check_number_of_users,
    is_gpt_token_limit,
    is_stt_block_limit,
    is_tts_symbol_limit,
)
from yandex_gpt import ask_gpt_helper

logging.basicConfig(
    filename=LOGS_PATH,
    level=logging.DEBUG,
    format="%(asctime)s %(message)s",
    filemode="w",
)

bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –∏ —Ç–∞–±–ª–∏—á–∫—É –≤ –Ω–µ–π
db.create_db()
db.create_table()


@bot.message_handler(commands=["start"])
def start(message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id

    if not db.is_user_in_db(user_id):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç
        if (
            len(db.get_all_users_data()) < MAX_USERS
        ):  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
            db.add_new_user(user_id)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å—á–µ—Ä–ø–∞–ΩüôÖ‚Äç‚ôÇÔ∏è. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–ºüòî"

            bot.send_message(chat_id=user_id, text=text)
            return

    # –≠—Ç–æ—Ç –±–ª–æ–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    text = (
        f"–ü—Ä–∏–≤–µ—Çüëãüèø, {user_name}! –Ø –±–æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∏ –º—ã –≤–º–µ—Å—Ç–µ –º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å,"
        f" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üéá.\n\n"
        "–¢–∞–∫ –∂–µ —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏ –º–Ω–µ –ì–°üîä, "
        "–∏ —è c  —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–≥–æ–≤–æ—Ä—é —Å —Ç–æ–±–æ–πüó£Ô∏è.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help\n"
        f"–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º?"
    )

    bot.send_message(
        chat_id=user_id,
        text=text,
    )


@bot.message_handler(commands=["kill_my_session"])
def kill_session(message: Message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        try:
            db.update_row(user_id, "total_gpt_tokens", 0)
            db.update_row(user_id, "tts_symbols", 0)
            db.update_row(user_id, "stt_blocks", 0)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}, —Å–µ—Å—Å–∏–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}, —Å–µ—Å—Å–∏–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print(f"{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏")
        logging.info(f"{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏–∏")


@bot.message_handler(commands=["debug"])
def send_logs(message):
    user_id = message.from_user.id
    if user_id in ADMINS:
        try:
            with open(LOGS_PATH, "rb") as f:
                bot.send_document(message.chat.id, f)
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(chat_id=message.chat.id, text="–õ–æ–≥–æ–≤ –Ω–µ—Ç!")
    else:
        print(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")
        logging.info(f"{user_id} –∑–∞—Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")


@bot.message_handler(commands=["help"])
def help_command(message: Message):
    text = (
        "üëã –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.\n\n"
        "–ß—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π gpt –ø–æ–º–æ—â–Ω–∏–∫–∞ üïµ‚Äç‚ôÄÔ∏è —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ .\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ YandexGPT Lite. \n"
        "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å gpt, "
        "–ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏ –º–Ω–µ –æ–± —ç—Ç–æ–º)\n"
        "–ò —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ—ë —Ä–µ—à–∏—Ç—å.\n\n"
        " P.S. –º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞"
    )
    bot.send_message(chat_id=message.chat.id, text=text)


def filter_hello(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_hello)
def say_hello(message: Message):
    user_name = message.from_user.first_name
    bot.send_message(chat_id=message.chat.id, text=f"{user_name}, –ø—Ä–∏–≤–µ—Ç–∏–∫–∏ üëã!")


def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


@bot.message_handler(content_types=["text"], func=filter_bye)
def say_bye(message: Message):
    bot.send_message(chat_id=message.chat.id, text="–ü–æ–∫–∞, –∑–∞—Ö–æ–¥–∏ –µ—â—ë!")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º
@bot.message_handler(content_types=["voice"])
def handle_voice(message: telebot.types.Message):
    try:
        user_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        status_check_users, error_message = check_number_of_users(user_id)
        if not status_check_users:
            bot.send_message(chat_id=user_id, text=error_message)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ–±–ª–æ–∫–æ–≤
        stt_blocks, error_message = is_stt_block_limit(user_id, message.voice.duration)
        if error_message:
            bot.send_message(chat_id=user_id, text=error_message)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_id = message.voice.file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        status_stt, stt_text = speech_to_text(file)
        if not status_stt:
            bot.send_message(chat_id=user_id, text=stt_text)
            return

        # –ó–∞–ø–∏—Å—å –≤ –ë–î
        db.add_message(
            user_id=user_id, full_message=[stt_text, "user", 0, 0, stt_blocks]
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPT-—Ç–æ–∫–µ–Ω–æ–≤
        last_messages, total_spent_tokens = db.select_n_last_messages(
            user_id, COUNT_LAST_MSG
        )
        total_gpt_tokens, error_message = is_gpt_token_limit(
            last_messages, total_spent_tokens
        )
        if error_message:
            bot.send_message(chat_id=user_id, text=error_message)
            return

        # –ó–∞–ø—Ä–æ—Å –∫ GPT –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt_helper(last_messages)
        if not status_gpt:
            bot.send_message(user_id, answer_gpt)
            return
        total_gpt_tokens += tokens_in_answer

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è SpeechKit
        tts_symbols, error_message = is_tts_symbol_limit(user_id, answer_gpt)

        # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ GPT –≤ –ë–î
        db.add_message(
            user_id=user_id,
            full_message=[answer_gpt, "assistant", total_gpt_tokens, tts_symbols, 0],
        )

        if error_message:
            bot.send_message(chat_id=user_id, text=error_message)
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        status_tts, voice_response = text_to_speech(answer_gpt)

        if status_tts:
            bot.send_voice(user_id, voice_response, reply_to_message_id=message.id)
        else:
            bot.send_message(
                chat_id=user_id, text=answer_gpt, reply_to_message_id=message.id
            )

    except Exception as e:
        user_id = message.from_user.id
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ì–° –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_voice: {e}")
        bot.send_message(
            chat_id=user_id,
            text="–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        )


@bot.message_handler(content_types=["text"])
def handle_text(message):
    try:
        user_id = message.from_user.id
        # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –µ—â—ë –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π)
        status_check_users, error_message = check_number_of_users(user_id)

        if not status_check_users:
            bot.send_message(user_id, error_message)  # –º–µ—Å—Ç –Ω–µ—Ç =(
            return

        # –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        full_user_message = [message.text, "user", 0, 0, 0]

        db.add_message(user_id=user_id, full_message=full_user_message)

        # –í–ê–õ–ò–î–ê–¶–ò–Ø: —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é GPT-—Ç–æ–∫–µ–Ω–æ–≤
        # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 (COUNT_LAST_MSG) —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        last_messages, total_spent_tokens = db.select_n_last_messages(
            user_id, COUNT_LAST_MSG
        )

        # –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ + —Ç–æ–∫–µ–Ω–æ–≤ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_gpt_tokens, error_message = is_gpt_token_limit(
            last_messages, total_spent_tokens
        )

        if error_message:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            bot.send_message(chat_id=user_id, text=error_message)
            return

        # GPT: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt_helper(last_messages)

        # GPT: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        if not status_gpt:
            # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            bot.send_message(chat_id=user_id, text=answer_gpt)
            return
        # —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ + —Ç–æ–∫–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ GPT
        total_gpt_tokens += tokens_in_answer

        # –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT –∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        full_gpt_message = [answer_gpt, "assistant", total_gpt_tokens, 0, 0]
        db.add_message(user_id=user_id, full_message=full_gpt_message)

        bot.send_message(
            chat_id=user_id, text=answer_gpt, reply_to_message_id=message.id
        )  # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–º
    except Exception as e:
        logging.error(e)  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ –ª–æ–≥–∏
        bot.send_message(
            message.from_user.id,
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        )


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(
    func=lambda message: True,
    content_types=[
        "audio",
        "photo",
        "voice",
        "video",
        "document",
        "text",
        "location",
        "contact",
        "sticker",
    ],
)
def send_echo(message: Message):
    text = (
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ({message.text}).\n"
        f"–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ªüòî, –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—Éü§ó"
    )
    bot.send_message(chat_id=message.chat.id, text=text)


logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling(timeout=60, long_polling_timeout=5)
